package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Print(minOperations([]int{1, 1, 4, 2, 3}, 5))
	//fmt.Print(minOperations([]int{1,1},3))
	//
	//fmt.Print(minOperations([]int{6016,5483,541,4325,8149,3515,7865,2209,9623,9763,4052,6540,2123,2074,765,7520,4941,5290,5868,6150,6006,6077,2856,7826,9119},31841))
	//
	//fmt.Print(minOperations([]int{5,6,7,8,9},4))

	/*
		[6016,5483,541,4325,8149,3515,7865,2209,9623,9763,4052,6540,2123,2074,765,7520,4941,5290,5868,6150,6006,6077,2856,7826,9119]
		31841
	*/

	/*[5,6,7,8,9]
	4*/

	/*[5207,5594,477,6938,8010,7606,2356,6349,3970,751,5997,6114,9903,3859,6900,7722,2378,1996,8902,228,4461,90,7321,7893,4879,9987,1146,8177,1073,7254,5088,402,4266,6443,3084,1403,5357,2565,3470,3639,9468,8932,3119,5839,8008,2712,2735,825,4236,3703,2711,530,9630,1521,2174,5027,4833,3483,445,8300,3194,8784,279,3097,1491,9864,4992,6164,2043,5364,9192,9649,9944,7230,7224,585,3722,5628,4833,8379,3967,5649,2554,5828,4331,3547,7847,5433,3394,4968,9983,3540,9224,6216,9665,8070,31,3555,4198,2626,9553,9724,4503,1951,9980,3975,6025,8928,2952,911,3674,6620,3745,6548,4985,5206,5777,1908,6029,2322,2626,2188,5639]
	565610
	113
	*/

	fmt.Print(minOperations([]int{5207, 5594, 477, 6938, 8010, 7606, 2356, 6349, 3970, 751, 5997, 6114, 9903, 3859, 6900, 7722, 2378, 1996, 8902, 228, 4461, 90, 7321, 7893, 4879, 9987, 1146, 8177, 1073, 7254, 5088, 402, 4266, 6443, 3084, 1403, 5357, 2565, 3470, 3639, 9468, 8932, 3119, 5839, 8008, 2712, 2735, 825, 4236, 3703, 2711, 530, 9630, 1521, 2174, 5027, 4833, 3483, 445, 8300, 3194, 8784, 279, 3097, 1491, 9864, 4992, 6164, 2043, 5364, 9192, 9649, 9944, 7230, 7224, 585, 3722, 5628, 4833, 8379, 3967, 5649, 2554, 5828, 4331, 3547, 7847, 5433, 3394, 4968, 9983, 3540, 9224, 6216, 9665, 8070, 31, 3555, 4198, 2626, 9553, 9724, 4503, 1951, 9980, 3975, 6025, 8928, 2952, 911, 3674, 6620, 3745, 6548, 4985, 5206, 5777, 1908, 6029, 2322, 2626, 2188, 5639}, 565610))
}

func minOperations(nums []int, x int) int {
	if nums[0] == x || nums[len(nums)-1] == x {
		return 1
	}

	m := make(map[int]int)

	suffix := 0
	for i := len(nums) - 1; i >= 0; i-- {
		suffix += nums[i]
		if _, ok := m[suffix]; ok {
			continue
		} else {
			m[suffix] = len(nums) - i
		}
	}

	min := math.MaxInt32

	if v, ok := m[x]; ok {
		min = v
	}

	prev := 0
	for i := 0; i < len(nums); i++ {
		prev += nums[i]
		if v, ok := m[x-prev]; ok {
			if v+i+1 < min {
				min = v + i + 1
			}
		}
		if i+1 > min {
			break
		}
	}
	if min == math.MaxInt32 || min > len(nums) {
		return -1
	}

	return min
}
